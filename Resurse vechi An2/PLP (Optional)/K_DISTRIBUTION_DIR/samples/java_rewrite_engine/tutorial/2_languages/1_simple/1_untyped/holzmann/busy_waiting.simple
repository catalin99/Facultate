// One writer and one reader thread doing multiple gets and puts. Since the
// gets don't wait for data to be put in the queue we may not get all the
// data put in the queue, but there shouldn't be any corruption from races.
function main() {
  initHeaps();

  var t1 = spawn {
    queuePut(1);
    queuePut(2);
  };

  var t2 = spawn {
    while(queueGet(0) == 0) {}
    while(queueGet(1) == 0) {}
  };
  join t1;
  join t2;

  dumpHeaps();
}

// Helper functions for debugging the results of the main function
function initHeaps() {
  var n;
  for (n = 0; n < 4; n = n + 1) {
    BFSHeap[n,0] = "null";
    BFSHeap[n,1] = "null";
    BFSHeap[n,2] = "null";
    intHeap[n] = "null";
  }
}

function dumpHeaps() {
  var n;
  print("[");
  for (n = 0; n < 4; n = n + 1) {
    print(" {",BFSHeap[n,0],",",BFSHeap[n,1],",",BFSHeap[n,2],"} ");
  }
  print("]\n[");
  for (n = 0; n < 4; n = n + 1) {
    print(" ",intHeap[n]," ");
  }
  print("]\n");
}

// To keep search as quick as possible, instead of defining constants such as
// NULL, DELETED, STATE, etc. I just used integer constants to avoid extra
// lookups.

// -1 Interpretted as a pointer is NULL
// 0 Interpretted as a state is DELETED
// 1 Interpretted as a state is STATE

// 0 as an array index is the type field of that struct
// 1 as an array index is the data field of that struct
// 2 as an array index is the next field of that struct

// These two arrays just simulate memory. BFSHeap contains dynamically allocated
// structs, indexed as described above. intHeap is just a "heap" for integer
// values so that queueGet can treat its argument as a pointer into this array.

var BFSHeap[4,3];
var intHeap[4];

var NEXT = 0;
function malloc() {
  NEXT = NEXT + 1;
  return NEXT - 1;
}

// Here are the pointers needed by the data structure, initialized to NULL
var head = -1, tail = -1, dels = -1;

function queueRetrieve() {
  var n;
  for (n = dels; n != -1 && n != head; n = BFSHeap[n,2]) {
    if (BFSHeap[n,0] != 0) {
      break;
    }
    if (BFSHeap[n,2] != -1) {
      dels = BFSHeap[n,2];
      return n;
    }
  }
  return malloc();
}

function queueGet(dataPointer) {
  var n;
  for (n = head; n != -1; n = BFSHeap[n,2]) {
    if (BFSHeap[n,0] != 0) {
      intHeap[dataPointer] = BFSHeap[n,1];
      if (BFSHeap[n,2] != -1) {
        head = BFSHeap[n,2];
      } else {
        head = n;
      }
      BFSHeap[n,0] = 0;
      return 1;
    }
  }
  return 0;
}

function queuePut(data) {
  var n = queueRetrieve();
  BFSHeap[n,1] = data;
  BFSHeap[n,2] = -1;
  BFSHeap[n,0] = 1;

  if (tail != -1) {
    BFSHeap[tail,2] = n;
  }
  tail = n;
  if (head == -1) {
    dels = head = tail;
  }
}
