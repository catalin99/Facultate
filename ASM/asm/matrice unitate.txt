#include<iostream>
using namespace std;

void matrice_unitate(int *, int )
{
	_asm{
		mov edi, [ebp+8]		// adresa la primul element din matrice
		mov ebx, 0
for_i:
		cmp ebx, [ebp+12]		// dimensiunea matricii
		jae exit1
		
		mov ecx, 0
for_j:
		
		cmp ecx, [ebp+12]
		jae exit2

		mov eax, [ebp+12]		// construim adresa de pe pozitia [i][j]
		mul ebx
		add eax, ecx

		cmp ebx, ecx
		jne not_eq
		mov dword ptr [edi+eax*4], 1	// i == j, deci vom pune 1
		jmp inside
not_eq:
		mov dword ptr [edi+eax*4], 0	// altfel, 0
inside:
		inc ecx
		jmp for_j
exit2:
		inc ebx
		jmp for_i
exit1:
	}
}

void main()
{
	int n=5;
	int mat[5][5];
	int *p = mat[0];

	_asm
	{
		push n
		push p
		call matrice_unitate
		add esp, 8
	}

	for(int i=0; i<n; i++)
	{
		for(int j=0; j<n; j++)
			cout << mat[i][j] <<" ";
		cout << endl;
	}
}

