if(y >= 0.5) #directionam catre primul server
{
suma = suma + server1
}
else
{
if(y < 0.3) #directionam catre celelalte
{
suma = suma + server2
}
else
{
suma = suma + server3
}
}
suma = suma + x #adunam si latenta dintre client si server
}
return (suma/n);
}
print(EstimareTimpMediu(1000))
ConturiInfectate = function()
{
maxInfect = 1
countInfect = 1
countZile = 1
while(countInfect > 0 & countInfect < 20)
{
if(countZile >= 2)
{
countInfect = countInfect - 5 #scadem conturile infectate
}
countCurat = 20 - countInfect  #actualizam valoarea conturilor "curate"
if(countCurat > 0)
{
for(i in 1:countCurat)
{
x = runif(1,0,1)
if(x <= 0.25)
{
countInfect = countInfect + 1 #raspandirea malware-ului cu probabilitatea de 0.25
}
}
}
if(maxInfect < countInfect)
{
maxInfect = countInfect
}
countZile = countZile + 1
}
return(maxInfect)
}
print(ConturiInfectate())
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
if(ConturiInfectate() >= 20){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectCelPutinOdata(1000))
#b)
InfectToateConturile = function(n){
suma = 0
for(i in 1:n){
if(ConturiInfectate() == 20){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectToateConturile(10000))
#c)
N_minim = function(epsilon,n)
{
alfa = 1-n
z = qnorm(alfa/2)
rez = (1/4)*(z/epsilon)*(z/epsilon)
return(rez)
}
nrSimulari = 1 + N_minim(0.01, 0.99)
print(nrSimulari)
print(InfectToateConturile(nrSimulari))
ConturiInfectate = function()
{
maxInfect = 1
countInfect = 1
countZile = 1
while(countInfect > 0 & countInfect < 20)
{
if(countZile >= 2)
{
countInfect = countInfect - 5 #scadem conturile infectate
}
countCurat = 20 - countInfect  #actualizam valoarea conturilor "curate"
if(countCurat > 0)
{
for(i in 1:countCurat)
{
x = runif(1,0,1)
if(x <= 0.25)
{
countInfect = countInfect + 1 #raspandirea malware-ului cu probabilitatea de 0.25
}
}
}
if(maxInfect < countInfect)
{
maxInfect = countInfect
}
countZile = countZile + 1
}
return(maxInfect)
}
print(ConturiInfectate())
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
if(ConturiInfectate() >= 20){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectCelPutinOdata(1000))
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
if(ConturiInfectate() >= 20){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectCelPutinOdata(1000))
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
if(ConturiInfectate() >= 5){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectCelPutinOdata(1000))
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
if(ConturiInfectate() >= 1){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectCelPutinOdata(20))
ConturiInfectate = function()
{
maxInfect = 1
countInfect = 1
countZile = 1
while(countInfect > 0 & countInfect < 20)
{
if(countZile >= 2)
{
countInfect = countInfect - 5 #scadem conturile infectate
}
countCurat = 20 - countInfect  #actualizam valoarea conturilor "curate"
if(countCurat > 0)
{
for(i in 1:countCurat)
{
x = runif(1,0,1)
if(x <= 0.25)
{
countInfect = countInfect + 1 #raspandirea malware-ului cu probabilitatea de 0.25
}
}
}
if(maxInfect < countInfect)
{
maxInfect = countInfect
}
countZile = countZile + 1
}
return(maxInfect)
}
print(ConturiInfectate())
ConturiInfectate = function()
{
maxInfect = 1
countInfect = 1
countZile = 1
while(countInfect > 0 & countInfect < 20)
{
if(countZile >= 2)
{
countInfect = countInfect - 5 #scadem conturile infectate
}
countCurat = 20 - countInfect  #actualizam valoarea conturilor "curate"
if(countCurat > 0)
{
for(i in 1:countCurat)
{
x = runif(1,0,1)
if(x <= 0.25)
{
countInfect = countInfect + 1 #raspandirea malware-ului cu probabilitatea de 0.25
}
}
}
if(maxInfect < countInfect)
{
maxInfect = countInfect
}
countZile = countZile + 1
}
return(maxInfect)
}
print(ConturiInfectate())
ConturiInfectate = function()
{
maxInfect = 1
countInfect = 1
countZile = 1
while(countInfect > 0 & countInfect < 20)
{
if(countZile >= 2)
{
countInfect = countInfect - 5 #scadem conturile infectate
}
countCurat = 20 - countInfect  #actualizam valoarea conturilor "curate"
if(countCurat > 0)
{
for(i in 1:countCurat)
{
x = runif(1,0,1)
if(x <= 0.25)
{
countInfect = countInfect + 1 #raspandirea malware-ului cu probabilitatea de 0.25
}
}
}
if(maxInfect < countInfect)
{
maxInfect = countInfect
}
countZile = countZile + 1
}
return(maxInfect)
}
print(ConturiInfectate())
ConturiInfectate = function()
{
maxInfect = 1
countInfect = 1
countZile = 1
while(countInfect > 0 & countInfect < 20)
{
if(countZile >= 2)
{
countInfect = countInfect - 5 #scadem conturile infectate
}
countCurat = 20 - countInfect  #actualizam valoarea conturilor "curate"
if(countCurat > 0)
{
for(i in 1:countCurat)
{
x = runif(1,0,1)
if(x <= 0.25)
{
countInfect = countInfect + 1 #raspandirea malware-ului cu probabilitatea de 0.25
}
}
}
if(maxInfect < countInfect)
{
maxInfect = countInfect
}
countZile = countZile + 1
}
return(maxInfect)
}
print(ConturiInfectate())
ConturiInfectate = function()
{
maxInfect = 1
countInfect = 1
countZile = 1
while(countInfect > 0 & countInfect < 20)
{
if(countZile >= 2)
{
countInfect = countInfect - 5 #scadem conturile infectate
}
countCurat = 20 - countInfect  #actualizam valoarea conturilor "curate"
if(countCurat > 0)
{
for(i in 1:countCurat)
{
x = runif(1,0,1)
if(x <= 0.25)
{
countInfect = countInfect + 1 #raspandirea malware-ului cu probabilitatea de 0.25
}
}
}
if(maxInfect < countInfect)
{
maxInfect = countInfect
}
countZile = countZile + 1
}
return(maxInfect)
}
print(ConturiInfectate())
ConturiInfectate = function()
{
maxInfect = 1
countInfect = 1
countZile = 1
while(countInfect > 0 & countInfect < 20)
{
if(countZile >= 2)
{
countInfect = countInfect - 5 #scadem conturile infectate
}
countCurat = 20 - countInfect  #actualizam valoarea conturilor "curate"
if(countCurat > 0)
{
for(i in 1:countCurat)
{
x = runif(1,0,1)
if(x <= 0.25)
{
countInfect = countInfect + 1 #raspandirea malware-ului cu probabilitatea de 0.25
}
}
}
if(maxInfect < countInfect)
{
maxInfect = countInfect
}
countZile = countZile + 1
}
return(maxInfect)
}
print(ConturiInfectate())
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
j=conturiInfectate()
if(j >= 1){
suma = suma + j
}
}
return(suma/n)
}
print(InfectCelPutinOdata(20))
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
j=ConturiInfectate()
if(j >= 1){
suma = suma + j
}
}
return(suma/n)
}
print(InfectCelPutinOdata(20))
InfectToateConturile = function(n){
suma = 0
for(i in 1:n){
if(ConturiInfectate() == 20){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectToateConturile(10000))
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
if(ConturiInfectate() >= 20){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectCelPutinOdata(1000))
InfectToateConturile = function(n){
suma = 0
for(i in 1:n){
if(ConturiInfectate() == 20){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectToateConturile(10000))
N_minim = function(epsilon,n)
{
alfa = 1-n
z = qnorm(alfa/2)
rez = (1/4)*(z/epsilon)*(z/epsilon)
return(rez)
}
nrSimulari = 1 + N_minim(0.01, 0.99)
print(nrSimulari)
print(InfectToateConturile(nrSimulari))
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
j=ConturiInfectate()
if(j >= 20){
suma = suma + j
}
}
return(suma/n)
}
print(InfectCelPutinOdata(1000))
InfectCelPutinOdata = function(n)
{
suma = 0
for(i in 1:n)
{
j=ConturiInfectate()
if(j >= 1){
suma = suma + j
}
}
return(suma/n)
}
print(InfectCelPutinOdata(1000))
InfectToateConturile = function(n){
suma = 0
for(i in 1:n){
if(ConturiInfectate() == 20){
suma = suma + 100
}
}
return(suma/n)
}
print(InfectToateConturile(10000))
InfectToateConturile = function(n){
suma = 0
for(i in 1:n){
if(ConturiInfectate() == 20){
suma = suma + 1
}
}
return(suma/n)
}
print(InfectToateConturile(10000))
InfectToateConturile = function(n){
suma = 0
for(i in 1:n){
if(ConturiInfectate() == 20){
suma = suma + 200
}
}
return(suma/n)
}
print(InfectToateConturile(1000000))
InfectToateConturile = function(n){
suma = 0
for(i in 1:n){
if(ConturiInfectate() == 20){
suma = suma + 200
}
}
return(suma/n)
}
print(InfectToateConturile(100000))
InfectToateConturile = function(n){
suma = 0
for(i in 1:n){
if(ConturiInfectate() == 20){
suma = suma + 200
}
}
return(suma/n)
}
print(InfectToateConturile(10000))
N_minim = function(epsilon,n)
{
alfa = 1-n
z = qnorm(alfa/2)
rez = (1/4)*(z/epsilon)*(z/epsilon)
return(rez)
}
nrSimulari = 1 + N_minim(0.01, 0.99)
print(nrSimulari)
print(InfectToateConturile(nrSimulari))
